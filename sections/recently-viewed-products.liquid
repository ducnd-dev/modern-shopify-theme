{% comment %}
  Recently Viewed Products Section
  Advanced recently viewed tracking with recommendations and cross-selling
{% endcomment %}

<div class="recently-viewed-section py-16 bg-{{ section.settings.background_color }}" data-recently-viewed-section>
  <div class="container mx-auto px-4">
    {% if section.settings.heading != blank or section.settings.subheading != blank %}
      <div class="text-center mb-12">
        {% if section.settings.heading != blank %}
          <h2 class="text-4xl md:text-5xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
            {{ section.settings.heading }}
          </h2>
        {% endif %}
        {% if section.settings.subheading != blank %}
          <p class="text-xl text-neutral-600 dark:text-neutral-400 max-w-3xl mx-auto">
            {{ section.settings.subheading }}
          </p>
        {% endif %}
      </div>
    {% endif %}

    <!-- Recently Viewed Container -->
    <div id="recently-viewed-container" class="hidden">
      <!-- Navigation -->
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center gap-4">
          <h3 class="text-xl font-semibold text-neutral-900 dark:text-neutral-100">
            Recently Viewed
            <span id="recently-viewed-count" class="text-sm text-neutral-500 dark:text-neutral-400 ml-2">(0 items)</span>
          </h3>
          
          {% if section.settings.show_view_all %}
            <button 
              id="view-all-recent"
              class="text-sm text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium transition-colors"
            >
              View All
            </button>
          {% endif %}
        </div>

        <div class="flex items-center gap-2">
          <!-- Clear History -->
          <button 
            id="clear-recent-history"
            class="text-sm text-neutral-500 dark:text-neutral-400 hover:text-red-500 dark:hover:text-red-400 transition-colors"
            title="Clear History"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>

          <!-- Navigation Arrows -->
          <button 
            id="recent-prev"
            class="w-8 h-8 bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-600 rounded-full flex items-center justify-center text-neutral-400 hover:text-primary-600 dark:hover:text-primary-400 hover:border-primary-300 dark:hover:border-primary-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            disabled
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>

          <button 
            id="recent-next"
            class="w-8 h-8 bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-600 rounded-full flex items-center justify-center text-neutral-400 hover:text-primary-600 dark:hover:text-primary-400 hover:border-primary-300 dark:hover:border-primary-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            disabled
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Products Slider -->
      <div class="relative overflow-hidden">
        <div 
          id="recently-viewed-slider"
          class="flex transition-transform duration-300 ease-in-out gap-6"
          style="transform: translateX(0px);"
        >
          <!-- Products will be populated here -->
        </div>
      </div>

      <!-- Recommendations -->
      {% if section.settings.show_recommendations %}
        <div id="recommendations-container" class="mt-12 hidden">
          <div class="border-t border-neutral-200 dark:border-neutral-600 pt-8">
            <h3 class="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              Based on your viewing history
            </h3>
            <div id="recommendations-grid" class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              <!-- Recommendations will be populated here -->
            </div>
          </div>
        </div>
      {% endif %}
    </div>

    <!-- Empty State -->
    <div id="recently-viewed-empty" class="text-center py-16">
      <svg class="w-16 h-16 text-neutral-300 dark:text-neutral-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
      </svg>
      <h3 class="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">No recently viewed products</h3>
      <p class="text-neutral-600 dark:text-neutral-400 mb-6">Products you view will appear here for easy access.</p>
      <a 
        href="/collections/all"
        class="inline-flex items-center gap-2 bg-primary-600 text-white px-6 py-3 rounded-full font-semibold hover:bg-primary-700 transition-colors"
      >
        Start Shopping
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
        </svg>
      </a>
    </div>
  </div>
</div>

<!-- Recently Viewed Modal (for "View All") -->
<div id="recent-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white dark:bg-neutral-800 rounded-xl max-w-6xl w-full max-h-[80vh] overflow-hidden">
    <!-- Modal Header -->
    <div class="p-6 border-b border-neutral-200 dark:border-neutral-600 flex items-center justify-between">
      <h3 class="text-2xl font-bold text-neutral-900 dark:text-neutral-100">Recently Viewed Products</h3>
      <button 
        id="close-recent-modal"
        class="text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-300 transition-colors"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Modal Content -->
    <div class="overflow-y-auto max-h-[calc(80vh-120px)] p-6">
      <div id="recent-modal-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        <!-- All recent products will be shown here -->
      </div>
    </div>
  </div>
</div>

<script>
  // Recently Viewed Products Manager
  class RecentlyViewedManager {
    constructor(options = {}) {
      this.storageKey = 'shopify_recently_viewed';
      this.maxItems = options.maxItems || 20;
      this.displayItems = options.displayItems || 6;
      this.recentProducts = this.loadRecentProducts();
      this.currentSlide = 0;
      this.init();
    }

    init() {
      this.bindEvents();
      this.updateDisplay();
      this.trackCurrentProduct();
      this.loadRecommendations();
    }

    loadRecentProducts() {
      try {
        const stored = localStorage.getItem(this.storageKey);
        return stored ? JSON.parse(stored) : [];
      } catch (error) {
        console.error('Error loading recent products:', error);
        return [];
      }
    }

    saveRecentProducts() {
      try {
        localStorage.setItem(this.storageKey, JSON.stringify(this.recentProducts));
      } catch (error) {
        console.error('Error saving recent products:', error);
      }
    }

    addRecentProduct(product) {
      // Remove if already exists
      this.recentProducts = this.recentProducts.filter(item => item.id !== product.id);
      
      // Add to beginning
      this.recentProducts.unshift({
        id: product.id,
        title: product.title,
        price: product.price,
        comparePrice: product.comparePrice,
        image: product.image,
        url: product.url,
        available: product.available !== false,
        vendor: product.vendor,
        type: product.type,
        tags: product.tags || [],
        viewedAt: new Date().toISOString()
      });

      // Keep only max items
      if (this.recentProducts.length > this.maxItems) {
        this.recentProducts = this.recentProducts.slice(0, this.maxItems);
      }

      this.saveRecentProducts();
      this.updateDisplay();
      this.loadRecommendations();
    }

    removeRecentProduct(productId) {
      this.recentProducts = this.recentProducts.filter(item => item.id !== productId);
      this.saveRecentProducts();
      this.updateDisplay();
    }

    clearRecentProducts() {
      if (this.recentProducts.length === 0) return;
      
      if (confirm('Clear your viewing history?')) {
        this.recentProducts = [];
        this.saveRecentProducts();
        this.updateDisplay();
      }
    }

    trackCurrentProduct() {
      // Auto-track current product if on product page
      if (window.location.pathname.includes('/products/')) {
        const productData = this.extractProductData();
        if (productData) {
          setTimeout(() => {
            this.addRecentProduct(productData);
          }, 1000); // Delay to ensure user is actually viewing
        }
      }
    }

    extractProductData() {
      // Extract product data from current page
      try {
        const productJson = document.querySelector('[data-product-json]');
        if (productJson) {
          return JSON.parse(productJson.textContent);
        }

        // Fallback: extract from page elements
        const title = document.querySelector('.product-title, h1')?.textContent?.trim();
        const price = document.querySelector('.price .money, .product-price')?.textContent?.trim();
        const image = document.querySelector('.product-image img, .featured-image img')?.src;
        
        if (title && price && image) {
          return {
            id: Date.now().toString(), // Fallback ID
            title: title,
            price: price,
            image: image,
            url: window.location.href,
            available: !document.querySelector('.sold-out, .unavailable')
          };
        }
      } catch (error) {
        console.error('Error extracting product data:', error);
      }
      
      return null;
    }

    updateDisplay() {
      const container = document.getElementById('recently-viewed-container');
      const emptyState = document.getElementById('recently-viewed-empty');
      const countElement = document.getElementById('recently-viewed-count');

      if (this.recentProducts.length === 0) {
        container.classList.add('hidden');
        emptyState.classList.remove('hidden');
        return;
      }

      container.classList.remove('hidden');
      emptyState.classList.add('hidden');

      if (countElement) {
        countElement.textContent = `(${this.recentProducts.length} item${this.recentProducts.length !== 1 ? 's' : ''})`;
      }

      this.renderProducts();
      this.updateNavigation();
    }

    renderProducts() {
      const slider = document.getElementById('recently-viewed-slider');
      if (!slider) return;

      const visibleProducts = this.recentProducts.slice(0, this.displayItems);
      
      slider.innerHTML = visibleProducts.map((product, index) => `
        <div class="product-card flex-shrink-0 w-64 bg-white dark:bg-neutral-800 rounded-xl shadow-sm border border-neutral-200 dark:border-neutral-700 overflow-hidden hover:shadow-md transition-shadow group" data-product-id="${product.id}">
          <div class="relative aspect-square overflow-hidden bg-neutral-100 dark:bg-neutral-600">
            <img 
              src="${product.image}" 
              alt="${product.title}"
              class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
              loading="lazy"
            >
            
            <!-- Quick Actions -->
            <div class="absolute top-2 right-2 flex flex-col gap-2">
              <button 
                class="quick-view-btn w-8 h-8 bg-white dark:bg-neutral-800 rounded-full shadow-md flex items-center justify-center text-neutral-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors opacity-0 group-hover:opacity-100"
                data-product-id="${product.id}"
                title="Quick View"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
              
              <button 
                class="remove-recent-btn w-8 h-8 bg-white dark:bg-neutral-800 rounded-full shadow-md flex items-center justify-center text-neutral-400 hover:text-red-500 transition-colors opacity-0 group-hover:opacity-100"
                data-product-id="${product.id}"
                title="Remove from recent"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>

            <!-- Sale Badge -->
            ${product.comparePrice ? `
              <div class="absolute top-2 left-2">
                <span class="bg-red-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
                  Sale
                </span>
              </div>
            ` : ''}

            <!-- Availability Badge -->
            ${!product.available ? `
              <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <span class="bg-neutral-900 text-white px-3 py-1 rounded-full text-sm font-semibold">
                  Sold Out
                </span>
              </div>
            ` : ''}
          </div>

          <div class="p-4">
            <div class="mb-2">
              ${product.vendor ? `<p class="text-xs text-neutral-500 dark:text-neutral-400 mb-1">${product.vendor}</p>` : ''}
              <h4 class="font-semibold text-neutral-900 dark:text-neutral-100 line-clamp-2 leading-tight">
                <a href="${product.url}" class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
                  ${product.title}
                </a>
              </h4>
            </div>

            <div class="flex items-center justify-between mb-3">
              <div class="flex items-center gap-2">
                <span class="font-bold text-primary-600 dark:text-primary-400">${product.price}</span>
                ${product.comparePrice ? `<span class="text-sm text-neutral-500 dark:text-neutral-400 line-through">${product.comparePrice}</span>` : ''}
              </div>
            </div>

            <div class="flex gap-2">
              <a 
                href="${product.url}"
                class="flex-1 bg-primary-600 text-white px-3 py-2 rounded-lg text-sm font-medium text-center hover:bg-primary-700 transition-colors"
              >
                View Product
              </a>
              ${product.available ? `
                <button 
                  class="add-to-cart-btn bg-neutral-200 dark:bg-neutral-600 text-neutral-700 dark:text-neutral-300 px-3 py-2 rounded-lg text-sm font-medium hover:bg-neutral-300 dark:hover:bg-neutral-500 transition-colors"
                  data-product-id="${product.id}"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m4.5-5a2 2 0 11-4 0 2 2 0 014 0zm6 0a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </button>
              ` : ''}
            </div>

            <p class="text-xs text-neutral-400 dark:text-neutral-500 mt-2">
              Viewed ${this.formatTimeAgo(product.viewedAt)}
            </p>
          </div>
        </div>
      `).join('');

      // Bind events for new elements
      this.bindProductEvents();
    }

    bindProductEvents() {
      // Remove recent product buttons
      document.querySelectorAll('.remove-recent-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const productId = btn.getAttribute('data-product-id');
          this.removeRecentProduct(productId);
        });
      });

      // Add to cart buttons
      document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const productId = btn.getAttribute('data-product-id');
          this.addToCart(productId);
        });
      });

      // Quick view buttons
      document.querySelectorAll('.quick-view-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const productId = btn.getAttribute('data-product-id');
          this.openQuickView(productId);
        });
      });
    }

    updateNavigation() {
      const prevBtn = document.getElementById('recent-prev');
      const nextBtn = document.getElementById('recent-next');
      
      if (!prevBtn || !nextBtn) return;

      const maxSlides = Math.max(0, this.recentProducts.length - this.displayItems);
      
      prevBtn.disabled = this.currentSlide <= 0;
      nextBtn.disabled = this.currentSlide >= maxSlides;
    }

    slideNext() {
      const maxSlides = Math.max(0, this.recentProducts.length - this.displayItems);
      if (this.currentSlide < maxSlides) {
        this.currentSlide++;
        this.updateSliderPosition();
        this.updateNavigation();
      }
    }

    slidePrev() {
      if (this.currentSlide > 0) {
        this.currentSlide--;
        this.updateSliderPosition();
        this.updateNavigation();
      }
    }

    updateSliderPosition() {
      const slider = document.getElementById('recently-viewed-slider');
      if (slider) {
        const slideWidth = 256 + 24; // card width + gap
        const translateX = -this.currentSlide * slideWidth;
        slider.style.transform = `translateX(${translateX}px)`;
      }
    }

    renderAllProducts() {
      const modalGrid = document.getElementById('recent-modal-grid');
      if (!modalGrid) return;

      modalGrid.innerHTML = this.recentProducts.map(product => `
        <div class="product-card bg-white dark:bg-neutral-800 rounded-lg shadow-sm border border-neutral-200 dark:border-neutral-700 overflow-hidden hover:shadow-md transition-shadow">
          <div class="relative aspect-square overflow-hidden bg-neutral-100 dark:bg-neutral-600">
            <img 
              src="${product.image}" 
              alt="${product.title}"
              class="w-full h-full object-cover"
              loading="lazy"
            >
            ${!product.available ? `
              <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <span class="bg-neutral-900 text-white px-2 py-1 rounded-full text-xs font-semibold">
                  Sold Out
                </span>
              </div>
            ` : ''}
          </div>
          <div class="p-3">
            <h4 class="font-medium text-neutral-900 dark:text-neutral-100 text-sm line-clamp-2 mb-2">
              <a href="${product.url}" class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
                ${product.title}
              </a>
            </h4>
            <p class="font-bold text-primary-600 dark:text-primary-400 text-sm">${product.price}</p>
            <p class="text-xs text-neutral-400 dark:text-neutral-500 mt-1">
              ${this.formatTimeAgo(product.viewedAt)}
            </p>
          </div>
        </div>
      `).join('');
    }

    loadRecommendations() {
      // Load product recommendations based on viewing history
      if (this.recentProducts.length === 0) return;

      // In a real implementation, this would call an API
      // For now, we'll simulate recommendations
      setTimeout(() => {
        this.renderRecommendations();
      }, 500);
    }

    renderRecommendations() {
      const container = document.getElementById('recommendations-container');
      const grid = document.getElementById('recommendations-grid');
      
      if (!container || !grid || this.recentProducts.length === 0) return;

      // Simulate recommendations (in real implementation, this would come from API)
      const recommendations = this.generateRecommendations();
      
      if (recommendations.length === 0) {
        container.classList.add('hidden');
        return;
      }

      container.classList.remove('hidden');
      
      grid.innerHTML = recommendations.map(product => `
        <div class="recommendation-card bg-white dark:bg-neutral-800 rounded-lg shadow-sm border border-neutral-200 dark:border-neutral-700 overflow-hidden hover:shadow-md transition-shadow cursor-pointer" data-product-url="${product.url}">
          <div class="aspect-square overflow-hidden bg-neutral-100 dark:bg-neutral-600">
            <img 
              src="${product.image}" 
              alt="${product.title}"
              class="w-full h-full object-cover"
              loading="lazy"
            >
          </div>
          <div class="p-2">
            <h5 class="font-medium text-neutral-900 dark:text-neutral-100 text-xs line-clamp-2 mb-1">${product.title}</h5>
            <p class="font-bold text-primary-600 dark:text-primary-400 text-xs">${product.price}</p>
          </div>
        </div>
      `).join('');

      // Bind click events for recommendations
      grid.querySelectorAll('.recommendation-card').forEach(card => {
        card.addEventListener('click', () => {
          const url = card.getAttribute('data-product-url');
          if (url) window.location.href = url;
        });
      });
    }

    generateRecommendations() {
      // Simulate product recommendations based on recent views
      // In a real implementation, this would be powered by AI/ML
      return [
        {
          id: 'rec1',
          title: 'Related Product 1',
          price: '$29.99',
          image: 'https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=300',
          url: '/products/related-1'
        },
        {
          id: 'rec2',
          title: 'Related Product 2',
          price: '$39.99',
          image: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=300',
          url: '/products/related-2'
        }
      ];
    }

    bindEvents() {
      // Navigation buttons
      document.getElementById('recent-prev')?.addEventListener('click', () => this.slidePrev());
      document.getElementById('recent-next')?.addEventListener('click', () => this.slideNext());

      // Clear history
      document.getElementById('clear-recent-history')?.addEventListener('click', () => this.clearRecentProducts());

      // View all modal
      document.getElementById('view-all-recent')?.addEventListener('click', () => {
        this.renderAllProducts();
        document.getElementById('recent-modal').classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      });

      // Close modal
      document.getElementById('close-recent-modal')?.addEventListener('click', () => {
        document.getElementById('recent-modal').classList.add('hidden');
        document.body.style.overflow = 'auto';
      });

      // Close modal on outside click
      document.getElementById('recent-modal')?.addEventListener('click', (e) => {
        if (e.target.id === 'recent-modal') {
          document.getElementById('recent-modal').classList.add('hidden');
          document.body.style.overflow = 'auto';
        }
      });
    }

    formatTimeAgo(dateString) {
      const now = new Date();
      const viewedDate = new Date(dateString);
      const diffInSeconds = Math.floor((now - viewedDate) / 1000);
      
      if (diffInSeconds < 60) return 'just now';
      if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
      if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
      if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`;
      
      return viewedDate.toLocaleDateString();
    }

    addToCart(productId) {
      // Integrate with cart functionality
      console.log('Adding to cart:', productId);
      this.showNotification('Added to cart!', 'success');
    }

    openQuickView(productId) {
      // Integrate with quick view functionality
      console.log('Opening quick view:', productId);
    }

    showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 text-white font-medium ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 
        'bg-blue-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // Public API methods
    getRecentProducts() {
      return [...this.recentProducts];
    }

    getRecentProductsCount() {
      return this.recentProducts.length;
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    window.recentlyViewedManager = new RecentlyViewedManager({
      maxItems: {{ section.settings.max_items | default: 20 }},
      displayItems: {{ section.settings.items_to_show | default: 6 }}
    });
  });

  // Global functions for external use
  window.addToRecentlyViewed = function(product) {
    return window.recentlyViewedManager?.addRecentProduct(product);
  };
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

{% schema %}
{
  "name": "Recently Viewed Products",
  "tag": "section",
  "class": "section-recently-viewed",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Keep Shopping"
    },
    {
      "type": "textarea",
      "id": "subheading",
      "label": "Subheading",
      "default": "Continue where you left off with your recently viewed products."
    },
    {
      "type": "select",
      "id": "background_color",
      "label": "Background Color",
      "options": [
        {
          "value": "transparent",
          "label": "Transparent"
        },
        {
          "value": "white",
          "label": "White"
        },
        {
          "value": "neutral-50",
          "label": "Light Gray"
        }
      ],
      "default": "white"
    },
    {
      "type": "range",
      "id": "items_to_show",
      "label": "Items to Show",
      "min": 3,
      "max": 8,
      "step": 1,
      "default": 6
    },
    {
      "type": "range",
      "id": "max_items",
      "label": "Maximum Items to Track",
      "min": 10,
      "max": 50,
      "step": 5,
      "default": 20
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show 'View All' Button",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_recommendations",
      "label": "Show Product Recommendations",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed Products",
      "settings": {
        "heading": "Keep Shopping",
        "subheading": "Continue where you left off with your recently viewed products.",
        "items_to_show": 6,
        "max_items": 20,
        "show_view_all": true,
        "show_recommendations": true
      }
    }
  ]
}
{% endschema %}