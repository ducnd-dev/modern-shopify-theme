{% comment %}
  Renders product variant options (size, color, material, etc.)
  
  Accepts:
  - product: {Object} product object
  - update_url: {Boolean} whether to update URL when variant changes
  - hide_variants: {Boolean} whether to hide sold out variants
  - picker_type: {String} 'button' or 'dropdown' for option display
  
  Usage:
  {% render 'product-variant-options', product: product, update_url: true %}
{% endcomment %}

{%- liquid
  assign picker_type = picker_type | default: 'button'
  assign update_url = update_url | default: false
  assign hide_variants = hide_variants | default: false
  
  unless product.has_only_default_variant
    assign variants_available_arr = product.variants | map: 'available'
    assign variants_option1_arr = product.variants | map: 'option1'
    assign variants_option2_arr = product.variants | map: 'option2'
    assign variants_option3_arr = product.variants | map: 'option3'
  endunless
-%}

{%- unless product.has_only_default_variant -%}
  <div class="product-form__options" data-product-options>
    {%- for option in product.options_with_values -%}
      <div class="product-form__option">
        <fieldset class="product-form__option-fieldset">
          <legend class="product-form__option-name">
            {{ option.name }}:
            <span class="product-form__option-value" data-option-value-{{ forloop.index0 }}>
              {{ option.selected_value }}
            </span>
          </legend>

          {%- if picker_type == 'dropdown' -%}
            <div class="product-form__option-selector">
              <select
                class="product-form__option-select"
                name="options[{{ option.name | escape }}]"
                data-option-select
                data-option-position="{{ option.position }}"
                id="Option{{ option.position }}-{{ section.id }}"
              >
                {%- for value in option.values -%}
                  {%- liquid
                    assign option_disabled = true
                    for variant in product.variants
                      case option.position
                        when 1
                          if variant.option1 == value and variant.available
                            assign option_disabled = false
                            break
                          endif
                        when 2
                          if variant.option2 == value and variant.available
                            assign option_disabled = false
                            break
                          endif
                        when 3
                          if variant.option3 == value and variant.available
                            assign option_disabled = false
                            break
                          endif
                      endcase
                    endfor
                  -%}
                  
                  {%- unless hide_variants and option_disabled -%}
                    <option
                      value="{{ value | escape }}"
                      {% if option.selected_value == value %}selected="selected"{% endif %}
                      {% if option_disabled %}disabled{% endif %}
                    >
                      {{ value }}
                      {%- if option_disabled %} - {{ 'products.product.sold_out' | t }}{% endif -%}
                    </option>
                  {%- endunless -%}
                {%- endfor -%}
              </select>
              {% render 'icon-chevron-down' %}
            </div>
          {%- else -%}
            <div class="product-form__option-buttons" role="radiogroup" aria-labelledby="ProductOption-{{ option.position }}-{{ section.id }}">
              {%- for value in option.values -%}
                {%- liquid
                  assign option_disabled = true
                  for variant in product.variants
                    case option.position
                      when 1
                        if variant.option1 == value and variant.available
                          assign option_disabled = false
                          break
                        endif
                      when 2
                        if variant.option2 == value and variant.available
                          assign option_disabled = false
                          break
                        endif
                      when 3
                        if variant.option3 == value and variant.available
                          assign option_disabled = false
                          break
                        endif
                    endcase
                  endfor
                -%}

                {%- unless hide_variants and option_disabled -%}
                  <input
                    type="radio"
                    id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
                    name="{{ option.name }}"
                    value="{{ value | escape }}"
                    class="product-form__option-input"
                    data-option-input
                    data-option-position="{{ option.position }}"
                    {% if option.selected_value == value %}checked{% endif %}
                    {% if option_disabled %}disabled{% endif %}
                  >
                  <label 
                    for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
                    class="product-form__option-label{% if option_disabled %} product-form__option-label--disabled{% endif %}"
                    title="{{ value }}"
                  >
                    {%- if option.name == 'Color' or option.name == 'Colour' -%}
                      {%- assign color_image = images[value] | default: blank -%}
                      {%- if color_image != blank -%}
                        <img 
                          src="{{ color_image | image_url: width: 30 }}" 
                          alt="{{ value }}"
                          width="30"
                          height="30"
                          class="product-form__option-color-image"
                        >
                      {%- else -%}
                        <span 
                          class="product-form__option-color" 
                          style="background-color: {{ value | downcase | replace: ' ', '' }}"
                          aria-label="{{ value }}"
                        ></span>
                      {%- endif -%}
                    {%- endif -%}
                    <span class="product-form__option-text">{{ value }}</span>
                    {%- if option_disabled -%}
                      <span class="product-form__option-disabled-icon">
                        {% render 'icon-unavailable' %}
                      </span>
                    {%- endif -%}
                  </label>
                {%- endunless -%}
              {%- endfor -%}
            </div>
          {%- endif -%}
        </fieldset>
      </div>
    {%- endfor -%}
  </div>

  <script>
    class ProductVariantOptions extends HTMLElement {
      constructor() {
        super();
        this.addEventListener('change', this.onVariantChange);
      }

      onVariantChange(event) {
        this.updateOptions();
        this.updateMasterOption();
        this.toggleAddButton(true, '', false);
        this.updatePickupAvailability();
        this.removeErrorMessage();

        if (!this.currentVariant) {
          this.toggleAddButton(true, '', true);
          this.setUnavailable();
        } else {
          this.updateMedia();
          this.updateURL();
          this.updateVariantInput();
          this.renderProductInfo();
        }
      }

      updateOptions() {
        this.options = Array.from(this.querySelectorAll('select, input[type="radio"]:checked'), (element) => element.value);
      }

      updateMasterOption() {
        this.currentVariant = this.getVariantData().find((variant) => {
          return !variant.options.map((option, index) => {
            return this.options[index] === option;
          }).includes(false);
        });
      }

      updateURL() {
        if (!this.currentVariant || this.dataset.updateUrl === 'false') return;
        window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
      }

      updateVariantInput() {
        const productForms = document.querySelectorAll(`#product-form-${this.dataset.section}, #product-form-installment-${this.dataset.section}`);
        productForms.forEach((productForm) => {
          const input = productForm.querySelector('input[name="id"]');
          input.value = this.currentVariant.id;
          input.dispatchEvent(new Event('change', { bubbles: true }));
        });
      }

      renderProductInfo() {
        fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`)
          .then((response) => response.text())
          .then((responseText) => {
            const html = new DOMParser().parseFromString(responseText, 'text/html');
            const destination = document.getElementById(`price-${this.dataset.section}`);
            const source = html.getElementById(`price-${this.dataset.section}`);
            
            if (source && destination) destination.innerHTML = source.innerHTML;

            const price = document.getElementById(`price-${this.dataset.section}`);
            if (price) price.classList.remove('visibility-hidden');
            this.toggleAddButton(!this.currentVariant.available, window.variantStrings.soldOut);
          });
      }

      toggleAddButton(disable = true, text, modifyClass = true) {
        const productForm = document.getElementById(`product-form-${this.dataset.section}`);
        if (!productForm) return;
        
        const addButton = productForm.querySelector('[name="add"]');
        const addButtonText = productForm.querySelector('[name="add"] > span');
        
        if (!addButton) return;

        if (disable) {
          addButton.setAttribute('disabled', 'disabled');
          if (text) addButtonText.textContent = text;
        } else {
          addButton.removeAttribute('disabled');
          addButtonText.textContent = window.variantStrings.addToCart;
        }

        if (!modifyClass) return;
      }

      setUnavailable() {
        const button = document.getElementById(`product-form-${this.dataset.section}`);
        const addButton = button.querySelector('[name="add"]');
        const addButtonText = button.querySelector('[name="add"] > span');
        const price = document.getElementById(`price-${this.dataset.section}`);
        
        if (!addButton) return;
        addButtonText.textContent = window.variantStrings.unavailable;
        if (price) price.classList.add('visibility-hidden');
      }

      getVariantData() {
        this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent);
        return this.variantData;
      }
    }

    customElements.define('product-variant-options', ProductVariantOptions);
  </script>
{%- endunless -%}

<style>
.product-form__options {
  margin: 1rem 0;
}

.product-form__option {
  margin-bottom: 1.5rem;
}

.product-form__option-fieldset {
  border: none;
  padding: 0;
  margin: 0;
}

.product-form__option-name {
  font-size: 0.875rem;
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.75rem;
  display: block;
}

.product-form__option-value {
  font-weight: 500;
  color: #111827;
}

.product-form__option-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.product-form__option-input {
  position: absolute;
  opacity: 0;
  pointer-events: none;
}

.product-form__option-label {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.15s ease;
  font-size: 0.875rem;
  background: white;
  position: relative;
  min-height: 2.5rem;
}

.product-form__option-label:hover {
  border-color: #6b7280;
  background-color: #f9fafb;
}

.product-form__option-input:checked + .product-form__option-label {
  border-color: #111827;
  background-color: #111827;
  color: white;
}

.product-form__option-label--disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background-color: #f3f4f6;
}

.product-form__option-color {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border: 2px solid #e5e7eb;
  flex-shrink: 0;
}

.product-form__option-color-image {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  object-fit: cover;
  flex-shrink: 0;
}

.product-form__option-disabled-icon {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: #ef4444;
}

.product-form__option-selector {
  position: relative;
}

.product-form__option-select {
  width: 100%;
  padding: 0.75rem 2.5rem 0.75rem 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  background: white;
  font-size: 0.875rem;
  appearance: none;
  cursor: pointer;
}

.product-form__option-select:focus {
  outline: none;
  border-color: #111827;
  box-shadow: 0 0 0 1px #111827;
}

.product-form__option-selector svg {
  position: absolute;
  right: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  width: 1rem;
  height: 1rem;
  color: #6b7280;
}

@media (max-width: 640px) {
  .product-form__option-buttons {
    gap: 0.375rem;
  }
  
  .product-form__option-label {
    padding: 0.375rem 0.75rem;
    font-size: 0.8125rem;
    min-height: 2.25rem;
  }
}
</style>