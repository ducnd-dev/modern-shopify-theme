{% comment %}
  Predictive Search Component
  - Real-time search with product previews
  - Category filtering
  - Search suggestions
  - Responsive design with accessibility
{% endcomment %}

<div 
  x-data="predictiveSearch()" 
  x-init="init()"
  class="relative"
  @click.away="closeSearch()"
>
  <!-- Search Input Container -->
  <div class="relative">
    <div class="relative">
      <input
        type="text"
        x-model="query"
        x-ref="searchInput"
        @input.debounce.300ms="performSearch()"
        @keydown.arrow-down.prevent="navigateDown()"
        @keydown.arrow-up.prevent="navigateUp()"
        @keydown.enter.prevent="selectCurrent()"
        @keydown.escape="closeSearch()"
        @focus="showResults = true"
        placeholder="{{ 'general.search.placeholder' | t }}"
        class="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-white"
        autocomplete="off"
        role="combobox"
        aria-expanded="false"
        :aria-expanded="showResults"
        aria-haspopup="listbox"
        aria-label="{{ 'general.search.input_label' | t }}"
      >
      
      <!-- Search Icon -->
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      
      <!-- Clear Button -->
      <button
        x-show="query.length > 0"
        x-transition
        @click="clearSearch()"
        class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 transition-colors"
        aria-label="{{ 'general.search.clear' | t }}"
      >
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Loading Indicator -->
    <div 
      x-show="loading"
      x-transition
      class="absolute right-3 top-1/2 transform -translate-y-1/2"
    >
      <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
    </div>
  </div>

  <!-- Search Results Dropdown -->
  <div
    x-show="showResults && (query.length > 0 || recentSearches.length > 0)"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 translate-y-1"
    x-transition:enter-end="opacity-100 translate-y-0"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 translate-y-0"
    x-transition:leave-end="opacity-0 translate-y-1"
    class="absolute z-50 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg max-h-96 overflow-hidden"
    role="listbox"
  >
    
    <!-- Search Suggestions -->
    <div x-show="suggestions.length > 0 && query.length > 0" class="p-2 border-b border-gray-100 dark:border-gray-700">
      <h3 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-2">
        {{ 'general.search.suggestions' | t }}
      </h3>
      <template x-for="(suggestion, index) in suggestions" :key="suggestion">
        <button
          @click="selectSuggestion(suggestion)"
          :class="{'bg-gray-50 dark:bg-gray-700': selectedIndex === index}"
          class="w-full text-left px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded transition-colors flex items-center"
          role="option"
          :aria-selected="selectedIndex === index"
        >
          <svg class="h-4 w-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <span x-text="suggestion"></span>
        </button>
      </template>
    </div>

    <!-- Category Filters -->
    <div x-show="categories.length > 0 && query.length > 0" class="p-2 border-b border-gray-100 dark:border-gray-700">
      <h3 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-2">
        {{ 'general.search.categories' | t }}
      </h3>
      <div class="flex flex-wrap gap-1">
        <template x-for="category in categories" :key="category.handle">
          <button
            @click="filterByCategory(category)"
            class="px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full hover:bg-blue-100 dark:hover:bg-blue-900 transition-colors"
            x-text="category.title"
          ></button>
        </template>
      </div>
    </div>

    <!-- Products Results -->
    <div x-show="products.length > 0" class="max-h-80 overflow-y-auto">
      <div class="p-2">
        <h3 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-2">
          {{ 'general.search.products' | t }}
        </h3>
        <template x-for="(product, index) in products" :key="product.id">
          <a
            :href="product.url"
            :class="{'bg-gray-50 dark:bg-gray-700': selectedIndex === (suggestions.length + index)}"
            class="flex items-center p-3 hover:bg-gray-50 dark:hover:bg-gray-700 rounded transition-colors group"
            role="option"
            :aria-selected="selectedIndex === (suggestions.length + index)"
          >
            <!-- Product Image -->
            <div class="flex-shrink-0 w-12 h-12 mr-3">
              <img
                :src="product.featured_image"
                :alt="product.title"
                class="w-full h-full object-cover rounded"
                loading="lazy"
              >
            </div>
            
            <!-- Product Info -->
            <div class="flex-1 min-w-0">
              <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate" x-text="product.title"></h4>
              <p class="text-sm text-gray-500 dark:text-gray-400 truncate" x-text="product.vendor"></p>
              <div class="flex items-center mt-1">
                <!-- Price -->
                <span class="text-sm font-semibold text-gray-900 dark:text-white" x-text="product.price_formatted"></span>
                <span 
                  x-show="product.compare_at_price && product.compare_at_price > product.price"
                  class="ml-2 text-xs text-gray-500 dark:text-gray-400 line-through"
                  x-text="product.compare_at_price_formatted"
                ></span>
                
                <!-- Badge -->
                <span 
                  x-show="product.available"
                  class="ml-auto px-2 py-1 text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-full"
                >
                  {{ 'products.product.available' | t }}
                </span>
                <span 
                  x-show="!product.available"
                  class="ml-auto px-2 py-1 text-xs bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-full"
                >
                  {{ 'products.product.sold_out' | t }}
                </span>
              </div>
            </div>
            
            <!-- Arrow Icon -->
            <div class="flex-shrink-0 ml-2">
              <svg class="h-4 w-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </div>
          </a>
        </template>
      </div>
    </div>

    <!-- Collections Results -->
    <div x-show="collections.length > 0" class="border-t border-gray-100 dark:border-gray-700">
      <div class="p-2">
        <h3 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-2">
          {{ 'general.search.collections' | t }}
        </h3>
        <template x-for="collection in collections" :key="collection.id">
          <a
            :href="collection.url"
            class="flex items-center p-2 hover:bg-gray-50 dark:hover:bg-gray-700 rounded transition-colors group"
          >
            <div class="flex-shrink-0 w-8 h-8 mr-3">
              <div class="w-full h-full bg-gray-200 dark:bg-gray-600 rounded flex items-center justify-center">
                <svg class="h-4 w-4 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
            </div>
            <div class="flex-1">
              <h4 class="text-sm font-medium text-gray-900 dark:text-white" x-text="collection.title"></h4>
              <p class="text-xs text-gray-500 dark:text-gray-400" x-text="collection.products_count + ' products'"></p>
            </div>
            <svg class="h-4 w-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </a>
        </template>
      </div>
    </div>

    <!-- Recent Searches -->
    <div x-show="recentSearches.length > 0 && query.length === 0" class="p-2">
      <div class="flex items-center justify-between mb-2">
        <h3 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide">
          {{ 'general.search.recent' | t }}
        </h3>
        <button
          @click="clearRecentSearches()"
          class="text-xs text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
        >
          {{ 'general.search.clear_all' | t }}
        </button>
      </div>
      <template x-for="search in recentSearches" :key="search">
        <button
          @click="selectSuggestion(search)"
          class="w-full text-left px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded transition-colors flex items-center"
        >
          <svg class="h-4 w-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span x-text="search"></span>
        </button>
      </template>
    </div>

    <!-- No Results -->
    <div x-show="query.length > 0 && !loading && products.length === 0 && collections.length === 0 && suggestions.length === 0" class="p-4 text-center">
      <svg class="mx-auto h-12 w-12 text-gray-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
      <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-1">{{ 'general.search.no_results' | t }}</h3>
      <p class="text-sm text-gray-500 dark:text-gray-400">{{ 'general.search.no_results_description' | t }}</p>
    </div>

    <!-- View All Results -->
    <div x-show="query.length > 0 && (products.length > 0 || collections.length > 0)" class="border-t border-gray-100 dark:border-gray-700 p-2">
      <a
        :href="'/search?q=' + encodeURIComponent(query)"
        class="flex items-center justify-center w-full p-2 text-sm font-medium text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900 rounded transition-colors"
      >
        {{ 'general.search.view_all' | t }}
        <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </a>
    </div>
  </div>
</div>

<script>
  function predictiveSearch() {
    return {
      query: '',
      loading: false,
      showResults: false,
      selectedIndex: -1,
      products: [],
      collections: [],
      suggestions: [],
      categories: [],
      recentSearches: [],
      searchCache: new Map(),
      debounceTimer: null,

      init() {
        this.loadRecentSearches();
        this.loadCategories();
      },

      async performSearch() {
        if (this.query.length < 2) {
          this.clearResults();
          return;
        }

        // Check cache first
        if (this.searchCache.has(this.query)) {
          const cached = this.searchCache.get(this.query);
          this.products = cached.products;
          this.collections = cached.collections;
          this.suggestions = cached.suggestions;
          this.showResults = true;
          return;
        }

        this.loading = true;
        this.selectedIndex = -1;

        try {
          const response = await fetch(`/search/suggest.json?q=${encodeURIComponent(this.query)}&resources[type]=product,collection&resources[limit]=8&resources[options][unavailable_products]=last&resources[options][fields]=title,vendor,product_type,variants.title`);
          
          if (!response.ok) throw new Error('Search request failed');
          
          const data = await response.json();
          
          // Process products
          this.products = data.resources.results.products?.map(product => ({
            id: product.id,
            title: product.title,
            url: product.url,
            vendor: product.vendor,
            price: product.price,
            compare_at_price: product.compare_at_price,
            price_formatted: this.formatPrice(product.price),
            compare_at_price_formatted: product.compare_at_price ? this.formatPrice(product.compare_at_price) : null,
            featured_image: product.featured_image ? this.resizeImage(product.featured_image, '120x120') : '/assets/placeholder.svg',
            available: product.available
          })) || [];

          // Process collections
          this.collections = data.resources.results.collections?.map(collection => ({
            id: collection.id,
            title: collection.title,
            url: collection.url,
            products_count: collection.products_count || 0
          })) || [];

          // Generate suggestions
          this.suggestions = data.resources.results.queries?.map(query => query.text) || [];

          // Cache results
          this.searchCache.set(this.query, {
            products: this.products,
            collections: this.collections,
            suggestions: this.suggestions
          });

          this.showResults = true;
        } catch (error) {
          console.error('Search error:', error);
        } finally {
          this.loading = false;
        }
      },

      clearResults() {
        this.products = [];
        this.collections = [];
        this.suggestions = [];
        this.selectedIndex = -1;
        this.showResults = false;
      },

      clearSearch() {
        this.query = '';
        this.clearResults();
        this.$refs.searchInput.focus();
      },

      closeSearch() {
        this.showResults = false;
        this.selectedIndex = -1;
      },

      selectSuggestion(suggestion) {
        this.query = suggestion;
        this.saveRecentSearch(suggestion);
        this.performSearch();
      },

      filterByCategory(category) {
        window.location.href = `/collections/${category.handle}?q=${encodeURIComponent(this.query)}`;
      },

      navigateDown() {
        const totalItems = this.suggestions.length + this.products.length;
        if (this.selectedIndex < totalItems - 1) {
          this.selectedIndex++;
        }
      },

      navigateUp() {
        if (this.selectedIndex > 0) {
          this.selectedIndex--;
        }
      },

      selectCurrent() {
        if (this.selectedIndex >= 0) {
          if (this.selectedIndex < this.suggestions.length) {
            this.selectSuggestion(this.suggestions[this.selectedIndex]);
          } else {
            const productIndex = this.selectedIndex - this.suggestions.length;
            if (this.products[productIndex]) {
              window.location.href = this.products[productIndex].url;
            }
          }
        } else if (this.query.length > 0) {
          this.saveRecentSearch(this.query);
          window.location.href = `/search?q=${encodeURIComponent(this.query)}`;
        }
      },

      saveRecentSearch(query) {
        if (!query.trim()) return;
        
        let recent = this.getStoredRecentSearches();
        recent = recent.filter(search => search !== query);
        recent.unshift(query);
        recent = recent.slice(0, 5); // Keep only 5 recent searches
        
        localStorage.setItem('shopify-recent-searches', JSON.stringify(recent));
        this.recentSearches = recent;
      },

      loadRecentSearches() {
        this.recentSearches = this.getStoredRecentSearches();
      },

      getStoredRecentSearches() {
        try {
          return JSON.parse(localStorage.getItem('shopify-recent-searches') || '[]');
        } catch {
          return [];
        }
      },

      clearRecentSearches() {
        localStorage.removeItem('shopify-recent-searches');
        this.recentSearches = [];
      },

      async loadCategories() {
        try {
          // This would be populated from your collections
          this.categories = [
            { handle: 'clothing', title: 'Clothing' },
            { handle: 'accessories', title: 'Accessories' },
            { handle: 'shoes', title: 'Shoes' },
            { handle: 'bags', title: 'Bags' }
          ];
        } catch (error) {
          console.error('Error loading categories:', error);
        }
      },

      formatPrice(price) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: Shopify.currency.active || 'USD'
        }).format(price / 100);
      },

      resizeImage(url, size) {
        if (!url) return '/assets/placeholder.svg';
        return url.replace(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?.*)?$/i, `_${size}.$1$2`);
      }
    }
  }
</script>