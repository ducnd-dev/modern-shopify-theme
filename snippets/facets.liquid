{%- comment -%}
  Facets (filters and sorting) for collection pages
  
  Accepts:
  - results: collection or search.results object
  - enable_filtering: boolean to enable/disable filtering
  - enable_sorting: boolean to enable/disable sorting
  - filter_type: 'vertical' or 'horizontal' or 'drawer'
  - collapse_on_larger_devices: boolean (desktop+)
{%- endcomment -%}

{%- liquid
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign total_active_values = 0
  if results.url
    assign results_url = results.url
  else 
    assign terms = results.terms | escape
    assign results_url = '?q=' | append: terms | append: '&options%5Bprefix%5D=last&sort_by=' | append: sort_by
  endif
-%}

<div class="facets-container" id="main-collection-filters" data-id="{{ section.id }}">
  <facet-filters-form class="facets">
    <form id="FacetFiltersForm" class="facets__form">

      {%- if enable_filtering -%}
        {%- unless results.filters == empty -%}
          <div class="facets__disclosure-vertical" id="FacetFiltersForm-{{ section.id }}">
            <div class="facets__header">
              <span class="facets__heading">
                {{ 'products.facets.filter_by_label' | t }}
              </span>
              <div class="facets__reset">
                <a href="{{ results_url | split: '?' | first }}" class="facets__reset-link button button--tertiary">
                  {{ 'products.facets.clear_all' | t }}
                </a>
              </div>
            </div>

            <div class="facets__main">
              {%- for filter in results.filters -%}
                {%- unless filter.type == 'price_range' -%}
                  {%- for filter_value in filter.active_values -%}
                    {%- assign total_active_values = total_active_values | plus: 1 -%}
                  {%- endfor -%}
                {%- endunless -%}
                
                <details id="Details-{{ forloop.index }}-{{ section.id }}" class="disclosure-has-popup facets__disclosure js-filter" data-index="{{ forloop.index }}">
                  <summary class="facets__summary caption-large focus-offset">
                    <div>
                      <span>{{ filter.label | escape }}</span>
                      {% render 'icon-caret' %}
                      <span class="facets__selected">
                        {%- assign filter_active_values = filter.active_values | size -%}
                        {%- if filter_active_values > 0 -%}
                          ({{ filter_active_values }})
                        {%- endif -%}
                      </span>
                    </div>
                  </summary>
                  
                  <div id="Facet-{{ forloop.index }}-{{ section.id }}" class="facets__display">
                    <fieldset class="facets__list">
                      <legend class="visually-hidden">{{ filter.label | escape }}</legend>
                      
                      {%- case filter.type -%}
                        {%- when 'boolean' or 'list' -%}
                          <ul class="facets__list list-unstyled" role="list">
                            {%- for filter_value in filter.values -%}
                              <li class="list-menu__item facets__item">
                                <label for="Filter-{{ filter.param_name }}-{{ forloop.index }}" class="facets__label caption-large">
                                  <input class="facets__checkbox"
                                    type="checkbox"
                                    name="{{ filter_value.param_name }}"
                                    value="{{ filter_value.value }}"
                                    id="Filter-{{ filter.param_name }}-{{ forloop.index }}"
                                    {% if filter_value.active %}checked{% endif %}
                                    {% if filter_value.count == 0 and filter_value.active == false %}disabled{% endif %}
                                  >

                                  <svg width="1.6rem" height="1.6rem" viewBox="0 0 16 16" aria-hidden="true" focusable="false">
                                    <rect width="16" height="16" stroke="currentColor" fill="none" stroke-width="1"></rect>
                                  </svg>

                                  <svg class="icon icon-checkmark"
                                    width="1.1rem"
                                    height="0.7rem"
                                    viewBox="0 0 11 7"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg">

                                    <path d="m1.5 3.5 2.5 2.5 6-6" stroke="currentColor" stroke-width="1.75" fill="none">
                                  </svg>

                                  <span aria-hidden="true">{{ filter_value.label | escape }} ({{ filter_value.count }})</span>
                                  <span class="visually-hidden">{{ filter_value.label | escape }} ({{ 'products.facets.product_count_simple' | t: count: filter_value.count }})</span>
                                </label>
                              </li>
                            {%- endfor -%}
                          </ul>
                        
                        {%- when 'price_range' -%}
                          <div class="facets__price">
                            <div class="field">
                              <input class="field__input"
                                name="{{ filter.min_value.param_name }}"
                                id="Filter-{{ filter.label | escape }}-GTE"
                                {%- if filter.min_value.value -%}
                                  value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
                                {%- endif -%}
                                type="number"
                                placeholder="0"
                                min="0"
                                max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                              >
                              <label class="field__label" for="Filter-{{ filter.label | escape }}-GTE">{{ 'products.facets.from' | t }}</label>
                            </div>

                            <div class="field">
                              <input class="field__input"
                                name="{{ filter.max_value.param_name }}"
                                id="Filter-{{ filter.label | escape }}-LTE"
                                {%- if filter.max_value.value -%}
                                  value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
                                {%- endif -%}
                                type="number"
                                min="0"
                                max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                                placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                              >
                              <label class="field__label" for="Filter-{{ filter.label | escape }}-LTE">{{ 'products.facets.to' | t }}</label>
                            </div>
                          </div>
                      {%- endcase -%}
                    </fieldset>
                  </div>
                </details>
              {%- endfor -%}

              <noscript>
                <button type="submit" class="facets__button-no-js button button--secondary">
                  {{ 'products.facets.filter_button' | t }}
                </button>
              </noscript>
            </div>

            <div class="active-facets active-facets-desktop">
              {%- for filter in results.filters -%}
                {%- for value in filter.active_values -%}
                  <facet-remove class="active-facets__button-wrapper">
                    <a href="{{ value.url_to_remove }}" class="active-facets__button active-facets__button--light">
                      <span class="active-facets__button-inner button button--tertiary">
                        {{ filter.label }}: {{ value.label | escape }}
                        {% render 'icon-close-small' %}
                        <span class="visually-hidden">{{ 'products.facets.clear_filter' | t }}</span>
                      </span>
                    </a>
                  </facet-remove>
                {%- endfor -%}
                
                {% if filter.type == "price_range" %}
                  {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                    <facet-remove class="active-facets__button-wrapper">
                      <a href="{{ filter.url_to_remove }}" class="active-facets__button active-facets__button--light">
                        <span class="active-facets__button-inner button button--tertiary">
                          {%- if filter.min_value.value -%}{{ filter.min_value.value | money }}{%- else -%}{{ 0 | money }}{%- endif -%}-{%- if filter.max_value.value -%}{{ filter.max_value.value | money }}{%- else -%}{{ filter.range_max | money }}{%- endif -%}
                          {% render 'icon-close-small' %}
                          <span class="visually-hidden">{{ 'products.facets.clear_filter' | t }}</span>
                        </span>
                      </a>
                    </facet-remove>
                  {%- endif -%}
                {% endif %}
              {%- endfor -%}
              
              <facet-remove class="active-facets__button-wrapper">
                <a href="{{ results_url | split: '?' | first }}" class="active-facets__button-remove underlined-link">
                  <span>{{ 'products.facets.clear_all' | t }}</span>
                </a>
              </facet-remove>
            </div>
          </div>
        {%- endunless -%}
      {%- endif -%}

      {%- if enable_sorting -%}
        <div class="facets__sorting">
          <div class="facets__sort">
            <label class="facets__sort-label caption-large text-body" for="SortBy">{{ 'products.facets.sort_by_label' | t }}</label>
            <div class="select">
              {%- assign sort_by = results.sort_by | default: results.default_sort_by -%}
              <select name="sort_by" class="facets__sort select__select caption-large" id="SortBy" aria-describedby="a11y-refresh-page-message">
                {%- for option in results.sort_options -%}
                  <option value="{{ option.value | escape }}"{% if option.value == sort_by %} selected="selected"{% endif %}>{{ option.name | escape }}</option>
                {%- endfor -%}
              </select>
              {% render 'icon-caret' %}
            </div>
          </div>
          
          <div class="product-count-vertical light">
            <h2 class="product-count__text text-body">
              <span id="ProductCountDesktop">
                {%- if results.results_count -%}
                  {{ 'templates.search.results_with_count' | t: terms: results.terms, count: results.results_count }}
                {%- elsif results.products_count == results.all_products_count -%}
                  {{ 'products.facets.product_count_simple' | t: count: results.products_count }}
                {%- else -%}
                  {{ 'products.facets.product_count' | t: product_count: results.products_count, count: results.all_products_count }}
                {%- endif -%}
              </span>
            </h2>
            
            {% render 'loading-spinner' %}
          </div>
        </div>
      {%- endif -%}
    </form>
  </facet-filters-form>

  {% if results.current_vendor or results.current_type %}
    <input name="q" value="{{ results.current_vendor }}{{ results.current_type }}" type="hidden">
  {% endif %}

  {%- if results.terms -%}
    <input type="hidden" name="q" value="{{ results.terms | escape }}">
    <input name="options[prefix]" value="last" type="hidden">
  {%- endif -%}
</div>

<div class="product-count-vertical light medium-hide large-up-hide">
  <h2 class="product-count__text text-body">
    <span id="ProductCount">
      {%- if results.results_count -%}
        {{ 'templates.search.results_with_count' | t: terms: results.terms, count: results.results_count }}
      {%- elsif results.products_count == results.all_products_count -%}
        {{ 'products.facets.product_count_simple' | t: count: results.products_count }}
      {%- else -%}
        {{ 'products.facets.product_count' | t: product_count: results.products_count, count: results.all_products_count }}
      {%- endif -%}
    </span>
  </h2>
  
  {% render 'loading-spinner' %}
</div>

<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "CollectionPage",
    "name": {{ results.title | json }},
    "description": {{ results.description | strip_html | json }},
    "image": {
      "@type": "ImageObject",
      "url": {{ results.image | image_url: width: 1200 | json }}
    }
  }
</script>

<script>
  // Facet functionality
  class FacetFiltersForm extends HTMLElement {
    constructor() {
      super();
      this.onActiveFilterClick = this.onActiveFilterClick.bind(this);

      this.debouncedOnSubmit = debounce((event) => {
        this.onSubmitHandler(event);
      }, 500);

      const facetForm = this.querySelector('#FacetFiltersForm');
      facetForm.addEventListener('input', this.debouncedOnSubmit.bind(this));

      const facetWrapper = this.querySelector('#FacetFiltersForm-{{ section.id }}');
      if (facetWrapper) facetWrapper.addEventListener('keyup', onKeyUpEscape);
    }

    static setListeners() {
      const onHistoryChange = (event) => {
        const searchParams = event.state ? event.state.searchParams : FacetFiltersForm.searchParamsInitial;
        if (searchParams === FacetFiltersForm.searchParamsPrev) return;
        FacetFiltersForm.renderPage(searchParams, null, false);
      }
      window.addEventListener('popstate', onHistoryChange);
    }

    static toggleActiveFacets(disable = true) {
      document.querySelectorAll('.js-facet-remove').forEach((element) => {
        element.classList.toggle('disabled', disable);
      });
    }

    static renderPage(searchParams, event, updateURLHash = true) {
      FacetFiltersForm.searchParamsPrev = searchParams;
      const sections = FacetFiltersForm.getSections();
      const countContainer = document.getElementById('ProductCount');
      const countContainerDesktop = document.getElementById('ProductCountDesktop');
      document.getElementById('ProductGridContainer').querySelector('.collection').classList.add('loading');
      if (countContainer) {
        countContainer.classList.add('loading');
      }
      if (countContainerDesktop) {
        countContainerDesktop.classList.add('loading');
      }

      sections.forEach((section) => {
        const url = `${window.location.pathname}?section_id=${section.section}&${searchParams}`;
        const filterDataUrl = element => element.url === url;

        FacetFiltersForm.filterData.some(filterDataUrl) ?
          FacetFiltersForm.renderSectionFromCache(filterDataUrl, event) :
          FacetFiltersForm.renderSectionFromFetch(url, event);
      });

      if (updateURLHash) FacetFiltersForm.updateURLHash(searchParams);
    }

    static renderSectionFromFetch(url, event) {
      fetch(url)
        .then(response => response.text())
        .then((responseText) => {
          const html = responseText;
          FacetFiltersForm.filterData = [...FacetFiltersForm.filterData, { html, url }];
          FacetFiltersForm.renderFilters(html, event);
          FacetFiltersForm.renderProductGridContainer(html);
          FacetFiltersForm.renderProductCount(html);
        });
    }

    static renderSectionFromCache(filterDataUrl, event) {
      const html = FacetFiltersForm.filterData.find(filterDataUrl).html;
      FacetFiltersForm.renderFilters(html, event);
      FacetFiltersForm.renderProductGridContainer(html);
      FacetFiltersForm.renderProductCount(html);
    }

    static renderProductGridContainer(html) {
      document.getElementById('ProductGridContainer').innerHTML = new DOMParser()
        .parseFromString(html, 'text/html')
        .getElementById('ProductGridContainer').innerHTML;
    }

    static renderProductCount(html) {
      const count = new DOMParser().parseFromString(html, 'text/html').getElementById('ProductCount').innerHTML;
      const container = document.getElementById('ProductCount');
      const containerDesktop = document.getElementById('ProductCountDesktop');
      if (container) {
        container.innerHTML = count;
        container.classList.remove('loading');
      }
      if (containerDesktop) {
        containerDesktop.innerHTML = count;
        containerDesktop.classList.remove('loading');
      }
    }

    static renderFilters(html, event) {
      const parsedHTML = new DOMParser().parseFromString(html, 'text/html');

      const facetDetailsElements = parsedHTML.querySelectorAll('#FacetFiltersForm .js-filter');
      const matchesIndex = (element) => {
        const jsFilter = event ? event.target.closest('.js-filter') : undefined;
        return jsFilter ? element.dataset.index === jsFilter.dataset.index : false;
      }
      const facetsToRender = Array.from(facetDetailsElements).filter(element => !matchesIndex(element));
      const countsToRender = Array.from(facetDetailsElements).find(matchesIndex);

      facetsToRender.forEach((element) => {
        document.querySelector(`.js-filter[data-index="${element.dataset.index}"]`).innerHTML = element.innerHTML;
      });

      FacetFiltersForm.renderActiveFacets(parsedHTML);
      FacetFiltersForm.renderAdditionalElements(parsedHTML);

      if (countsToRender) FacetFiltersForm.renderCounts(countsToRender, event.target.closest('.js-filter'));
    }

    static renderActiveFacets(html) {
      const activeFacetElementSelectors = ['.active-facets-mobile', '.active-facets-desktop'];

      activeFacetElementSelectors.forEach((selector) => {
        const activeFacetsElement = html.querySelector(selector);
        if (!activeFacetsElement) return;
        document.querySelector(selector).innerHTML = activeFacetsElement.innerHTML;
      })

      FacetFiltersForm.toggleActiveFacets(false);
    }

    static renderAdditionalElements(html) {
      const mobileElementSelectors = ['.mobile-facets__open', '.mobile-facets__count', '.sorting'];

      mobileElementSelectors.forEach((selector) => {
        if (!html.querySelector(selector)) return;
        document.querySelector(selector).innerHTML = html.querySelector(selector).innerHTML;
      });

      document.getElementById('FacetFiltersFormMobile').innerHTML = html.querySelector('#FacetFiltersFormMobile').innerHTML;
    }

    static renderCounts(source, target) {
      const targetElement = target.querySelector('.facets__selected');
      const sourceElement = source.querySelector('.facets__selected');

      const targetElementAccessibility = target.querySelector('.facets__summary');
      const sourceElementAccessibility = source.querySelector('.facets__summary');

      if (sourceElement && targetElement) {
        targetElement.outerHTML = sourceElement.outerHTML;
      }

      if (targetElementAccessibility && sourceElementAccessibility) {
        targetElementAccessibility.outerHTML = sourceElementAccessibility.outerHTML;
      }
    }

    static updateURLHash(searchParams) {
      history.pushState({ searchParams }, '', `${window.location.pathname}${searchParams && '?'.concat(searchParams)}`);
    }

    static getSections() {
      return [
        {
          section: document.getElementById('product-grid').dataset.id,
        }
      ]
    }

    createSearchParams(form) {
      const formData = new FormData(form);
      return new URLSearchParams(formData).toString();
    }

    onSubmitForm(searchParams, event) {
      FacetFiltersForm.renderPage(searchParams, event);
    }

    onSubmitHandler(event) {
      event.preventDefault();
      const sortFilterForms = document.querySelectorAll('facet-filters-form form');
      if (sortFilterForms.length > 1) {
        const searchParams = this.createSearchParams(event.target.closest('form'))
        this.onSubmitForm(searchParams, event)
      } else {
        const form = document.getElementById('FacetFiltersForm');
        const searchParams = this.createSearchParams(form);
        this.onSubmitForm(searchParams, event);
      }
    }

    onActiveFilterClick(event) {
      event.preventDefault();
      FacetFiltersForm.toggleActiveFacets();
      const url = event.currentTarget.href.indexOf('?') == -1 ? '' : event.currentTarget.href.slice(event.currentTarget.href.indexOf('?') + 1);
      FacetFiltersForm.renderPage(url);
    }
  }

  FacetFiltersForm.filterData = [];
  FacetFiltersForm.searchParamsInitial = window.location.search.slice(1);
  FacetFiltersForm.searchParamsPrev = window.location.search.slice(1);
  customElements.define('facet-filters-form', FacetFiltersForm);
  FacetFiltersForm.setListeners();

  class FacetRemove extends HTMLElement {
    constructor() {
      super();
      const facetLink = this.querySelector('a');
      facetLink.setAttribute('role', 'button');
      facetLink.addEventListener('click', this.closeFilter.bind(this));
      facetLink.addEventListener('keyup', (event) => {
        event.preventDefault();
        if (event.code.toUpperCase() === 'SPACE') this.closeFilter(event);
      });
    }

    closeFilter(event) {
      event.preventDefault();
      const form = this.closest('facet-filters-form') || document.querySelector('facet-filters-form');
      form.onActiveFilterClick(event);
    }
  }

  customElements.define('facet-remove', FacetRemove);

  class PriceRange extends HTMLElement {
    constructor() {
      super();
      this.querySelectorAll('input')
        .forEach(element => element.addEventListener('change', this.onRangeChange.bind(this)));

      this.setMinAndMaxValues();
    }

    onRangeChange(event) {
      this.adjustToValidValues(event.currentTarget);
      this.setMinAndMaxValues();
    }

    setMinAndMaxValues() {
      const inputs = this.querySelectorAll('input');
      const minInput = inputs[0];
      const maxInput = inputs[1];
      if (maxInput.value) minInput.setAttribute('max', maxInput.value);
      if (minInput.value) maxInput.setAttribute('min', minInput.value);
      if (minInput.value === '') maxInput.setAttribute('min', 0);
      if (maxInput.value === '') minInput.setAttribute('max', maxInput.getAttribute('max'));
    }

    adjustToValidValues(input) {
      const value = Number(input.value);
      const min = Number(input.getAttribute('min'));
      const max = Number(input.getAttribute('max'));

      if (value < min) input.value = min;
      if (value > max) input.value = max;
    }
  }

  customElements.define('price-range', PriceRange);

  function debounce(fn, wait) {
    let t;
    return (...args) => {
      clearTimeout(t);
      t = setTimeout(() => fn.apply(this, args), wait);
    };
  }

  function onKeyUpEscape(event) {
    if (event.code.toUpperCase() !== 'ESCAPE') return;

    const openDetailsElement = event.target.closest('details[open]');
    if (!openDetailsElement) return;

    const summaryElement = openDetailsElement.querySelector('summary');
    openDetailsElement.removeAttribute('open');
    summaryElement.setAttribute('aria-expanded', false);
    summaryElement.focus();
  }
</script>